// Code generated by 'yaegi extract github.com/whitaker-io/machine'. DO NOT EDIT.

package yaegi

import (
	"context"
	"reflect"

	"github.com/whitaker-io/machine"
)

var symbols = map[string]map[string]reflect.Value{}

func init() {
	symbols["github.com/whitaker-io/machine"] = map[string]reflect.Value{
		// type definitions
		"Data":         reflect.ValueOf((*machine.Data)(nil)),
		"Packet":       reflect.ValueOf((*machine.Packet)(nil)),
		"Subscription": reflect.ValueOf((*machine.Subscription)(nil)),
		"Applicative":  reflect.ValueOf((*machine.Applicative)(nil)),
		"Retriever":    reflect.ValueOf((*machine.Retriever)(nil)),
		"Fold":         reflect.ValueOf((*machine.Fold)(nil)),
		"Fork":         reflect.ValueOf((*machine.Fork)(nil)),
		"Sender":       reflect.ValueOf((*machine.Sender)(nil)),

		// interface wrapper definitions
		"_Subscription": reflect.ValueOf((*_github_com_whitaker_io_machine_Subscription)(nil)),
	}
}

// _github_com_whitaker_io_machine_Subscription is an interface wrapper for Subscription type
type _github_com_whitaker_io_machine_Subscription struct {
	WClose func() error
	WRead  func(ctx context.Context) []machine.Data
}

func (W _github_com_whitaker_io_machine_Subscription) Close() error { return W.WClose() }
func (W _github_com_whitaker_io_machine_Subscription) Read(ctx context.Context) []machine.Data {
	return W.WRead(ctx)
}
